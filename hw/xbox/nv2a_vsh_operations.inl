/* GLSL */

/* See:
 * http://msdn.microsoft.com/en-us/library/windows/desktop/bb174703%28v=vs.85%29.aspx
 * https://www.opengl.org/registry/specs/NV/vertex_program1_1.txt
 */
"\n"
"/* Make sure input is always a 4 component vector */\n"
"IFloat4 _in(bool negate, IFloat v) { return IFloat4(negate ? IFloatNegate(v) : v); }\n"
"IFloat4 _in(bool negate, IFloat2 v) { return negate ? IFloat4Negate(v.xyyy) : v.xyyy; }\n"
"IFloat4 _in(bool negate, IFloat3 v) { return negate ? IFloat4Negate(v.xyzz) : v.xyzz; }\n"
"IFloat4 _in(bool negate, IFloat4 v) { return negate ? IFloat4Negate(v) : v; }\n"
"#define _in(negate, value) _in((negate 1) < 0, value)\n"
"\n"
"#define MOV(dest, mask, srcN, src) dest.mask = _MOV(_in(srcN,src)).mask\n"
"IFloat4 _MOV(IFloat4 src)\n"
"{\n"
"  return src;\n"
"}\n"
"\n"
"#define MUL(dest, mask, src0N, src0, src1N, src1) dest.mask = _MUL(_in(src0N, src0), _in(src1N, src1)).mask\n"
"IFloat4 _MUL(IFloat4 src0, IFloat4 src1)\n" 
"{\n"
"  return IFloat4Multiply(src0, src1);\n"
"}\n"
"\n"
"#define ADD(dest, mask, src0N, src0, src1N, src1) dest.mask = _ADD(_in(src0N, src0), _in(src1N, src1)).mask\n"
"IFloat4 _ADD(IFloat4 src0, IFloat4 src1)\n" 
"{\n"
"  return IFloat4Add(src0, src1);\n"
"}\n"
"\n"
"#define MAD(dest, mask, src0N, src0, src1N, src1, src2N, src2) dest.mask = _MAD(_in(src0N, src0), _in(src1N, src1), _in(src2N, src2)).mask\n"
"IFloat4 _MAD(IFloat4 src0, IFloat4 src1, IFloat4 src2)\n" 
"{\n"
"  return IFloat4Add(IFloat4Multiply(src0, src1), src2);\n"
"}\n"
"\n"
"#define DP3(dest, mask, src0N, src0, src1N, src1) dest.mask = _DP3(_in(src0N, src0), _in(src1N, src1)).mask\n"
"IFloat4 _DP3(IFloat4 src0, IFloat4 src1)\n"
"{\n"
"  return IFloat4(IFloatAdd(IFloatAdd(IFloatMultiply(src0.x, src1.x),\n"
"                                     IFloatMultiply(src0.y, src1.y)),\n"
"                           IFloatMultiply(src0.z, src1.z)));\n"
"}\n"
"\n"
"#define DPH(dest, mask, src0N, src0, src1N, src1) dest.mask = _DPH(_in(src0N, src0), _in(src1N, src1)).mask\n"
"IFloat4 _DPH(IFloat4 src0, IFloat4 src1)\n"
"{\n"
"  return IFloat4(IFloatAdd(IFloatAdd(IFloatAdd(IFloatMultiply(src0.x, src1.x),\n"
"                                               IFloatMultiply(src0.y, src1.y)),\n"
"                                     IFloatMultiply(src0.z, src1.z)),\n"
"                           src1.w));\n"
"}\n"
"\n"
"#define DP4(dest, mask, src0N, src0, src1N, src1) dest.mask = _DP4(_in(src0N, src0), _in(src1N, src1)).mask\n"
"IFloat4 _DP4(IFloat4 src0, IFloat4 src1)\n"
"{\n"
"  return IFloat4(IFloatAdd(IFloatAdd(IFloatAdd(IFloatMultiply(src0.x, src1.x),\n"
"                                               IFloatMultiply(src0.y, src1.y)),\n"
"                                     IFloatMultiply(src0.z, src1.z)),\n"
"                           IFloatMultiply(src0.w, src1.w)));\n"
"}\n"
"\n"
"#define DST(dest, mask, src0N, src0, src1N, src1) dest.mask = _DST(_in(src0N, src0), _in(src1N, src1)).mask\n"
"IFloat4 _DST(IFloat4 src0, IFloat4 src1)\n"
"{\n"
"  return IFloat4(IFloatOne,\n"
"              IFloatMultiply(src0.y, src1.y),\n"
"              src0.z,\n"
"              src1.w);\n"
"}\n"
"\n"
"#define MIN(dest, mask, src0N, src0, src1N, src1) dest.mask = _MIN(_in(src0N, src0), _in(src1N, src1)).mask\n"
"IFloat4 _MIN(IFloat4 src0, IFloat4 src1)\n"
"{\n"
"  return Vec4ToIFloat4(min(IFloat4ToVec4(src0), IFloat4ToVec4(src1)));\n"
"}\n"
"\n"
"#define MAX(dest, mask, src0N, src0, src1N, src1) dest.mask = _MAX(_in(src0N, src0), _in(src1N, src1)).mask\n"
"IFloat4 _MAX(IFloat4 src0, IFloat4 src1)\n"
"{\n"
"  return Vec4ToIFloat4(max(IFloat4ToVec4(src0), IFloat4ToVec4(src1)));\n"
"}\n"
"\n"
"#define SLT(dest, mask, src0N, src0, src1N, src1) dest.mask = _SLT(_in(src0N, src0), _in(src1N, src1)).mask\n"
"IFloat4 _SLT(IFloat4 src0, IFloat4 src1)\n"
"{\n"
"  return Vec4ToIFloat4(vec4(lessThan(IFloat4ToVec4(src0), IFloat4ToVec4(src1))));\n"
"}\n"
"\n"
"#define ARL(dest, srcN, src) dest = _ARL(_in(srcN, src).x)\n"
"int _ARL(IFloat src)\n"
"{\n"
"  return int(floor(IFloatToFloat(src)));\n"
"}\n"
"\n"
"#define SGE(dest, mask, src0N, src0, src1N, src1) dest.mask = _SGE(_in(src0N, src0), _in(src1N, src1)).mask\n"
"IFloat4 _SGE(IFloat4 src0, IFloat4 src1)\n"
"{\n"
"  return Vec4ToIFloat4(vec4(greaterThanEqual(IFloat4ToVec4(src0), IFloat4ToVec4(src1))));\n"
"}\n"
"\n"
"#define RCP(dest, mask, srcN, src) dest.mask = _RCP(_in(srcN, src).x).mask\n"
"IFloat4 _RCP(IFloat src)\n"
"{\n"
"  return IFloat4(FloatToIFloat(1.0 / IFloatToFloat(src)));\n"
"}\n"
"\n"
"#define RCC(dest, mask, srcN, src) dest.mask = _RCC(_in(srcN, src).x).mask\n"
"IFloat4 _RCC(IFloat src)\n"
"{\n"
"  float t = 1.0 / IFloatToFloat(src);\n"
"  if (t > 0.0) {\n"
"    t = clamp(t, 5.42101e-020, 1.884467e+019);\n"
"  } else {\n"
"    t = clamp(t, -1.884467e+019, -5.42101e-020);\n"
"  }\n"
"  return IFloat4(FloatToIFloat(t));\n"
"}\n"
"\n"
"#define RSQ(dest, mask, srcN, src) dest.mask = _RSQ(_in(srcN, src).x).mask\n"
"IFloat4 _RSQ(IFloat src)\n"
"{\n"
"  if (IFloatIsZero(src)) { return IFloat4(IFloatInf); }\n"
"  if (IFloatIsInf(src)) { return IFloat4(IFloatZero); }\n"
"  return IFloat4(FloatToIFloat(inversesqrt(abs(IFloatToFloat(src)))));\n"
"}\n"
"\n"
"#define EXP(dest, mask, srcN, src) dest.mask = _EXP(_in(srcN, src).x).mask\n"
"IFloat4 _EXP(IFloat src)\n"
"{\n"
"  return IFloat4(FloatToIFloat(exp2(IFloatToFloat(src))));\n"
"}\n"
"\n"
"#define LOG(dest, mask, srcN, src) dest.mask = _LOG(_in(srcN, src).x).mask\n"
"IFloat4 _LOG(IFloat src)\n"
"{\n"
"  return IFloat4(FloatToIFloat(log2(IFloatToFloat(src))));\n"
"}\n"
"\n"
"#define LIT(dest, mask, srcN, src) dest.mask = _LIT(_in(srcN, src)).mask\n"
"IFloat4 _LIT(IFloat4 src)\n"
"{\n"
"  vec4 s = IFloat4ToVec4(src);\n"
"  float epsilon = 1.0 / 256.0;\n"
"  s.w = clamp(s.w, -(128.0 - epsilon), 128.0 - epsilon);\n"
"  s.x = max(s.x, 0.0);\n"
"  s.y = max(s.y, 0.0);\n"
"  vec4 t = vec4(1.0, 0.0, 0.0, 1.0);\n"
"  t.y = s.x;\n"
#if 1
"  t.z = (s.x > 0.0) ? exp2(s.w * log2(s.y)) : 0.0;\n"
#else
"  t.z = (s.x > 0.0) ? pow(s.y, s.w) : 0.0;\n"
#endif
"  return Vec4ToIFloat4(t);\n"
"}\n"
